{"version":3,"file":"main.a0c15c992b0ae2f45338.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAWA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AA3KA;AA6KA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnRA","sources":["/Users/jogwangseog/choks/videosdk-web-sample/react-demo/src/App.tsx","/Users/jogwangseog/choks/videosdk-web-sample/react-demo/webpack/runtime/getFullHash"],"sourcesContent":["import React, { useEffect, useContext, useState, useCallback, useReducer, useMemo } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ZoomVideo, { ConnectionState, ReconnectReason } from '@zoom/videosdk';\nimport { message, Modal } from 'antd';\nimport 'antd/dist/antd.min.css';\nimport produce from 'immer';\n// import Home from './feature/home/home';\nimport Home from '@/feature/home/home';\nimport Video from './feature/video/video';\nimport VideoSingle from './feature/video/video-single';\nimport VideoNonSAB from './feature/video/video-non-sab';\nimport Preview from './feature/preview/preview';\nimport ZoomContext from './context/zoom-context';\nimport ZoomMediaContext from './context/media-context';\nimport ChatContext from './context/chat-context';\nimport CommandContext from './context/cmd-context';\nimport LiveTranscriptionContext from './context/live-transcription';\nimport RecordingContext from './context/recording-context';\nimport LoadingLayer from './component/loading-layer';\nimport Chat from './feature/chat/chat';\nimport Command from './feature/command/command';\nimport Subsession from './feature/subsession/subsession';\nimport {\n  ChatClient,\n  CommandChannelClient,\n  LiveTranscriptionClient,\n  MediaStream,\n  RecordingClient,\n  SubsessionClient\n} from './index-types';\nimport './App.css';\nimport SubsessionContext from './context/subsession-context';\nimport { isAndroidBrowser } from './utils/platform';\ninterface AppProps {\n  meetingArgs: {\n    sdkKey: string;\n    topic: string;\n    signature: string;\n    name: string;\n    password?: string;\n    webEndpoint?: string;\n    enforceGalleryView?: string;\n  };\n}\nconst mediaShape = {\n  audio: {\n    encode: false,\n    decode: false\n  },\n  video: {\n    encode: false,\n    decode: false\n  },\n  share: {\n    encode: false,\n    decode: false\n  }\n};\nconst mediaReducer = produce((draft, action) => {\n  switch (action.type) {\n    case 'audio-encode': {\n      draft.audio.encode = action.payload;\n      break;\n    }\n    case 'audio-decode': {\n      draft.audio.decode = action.payload;\n      break;\n    }\n    case 'video-encode': {\n      draft.video.encode = action.payload;\n      break;\n    }\n    case 'video-decode': {\n      draft.video.decode = action.payload;\n      break;\n    }\n    case 'share-encode': {\n      draft.share.encode = action.payload;\n      break;\n    }\n    case 'share-decode': {\n      draft.share.decode = action.payload;\n      break;\n    }\n    case 'reset-media': {\n      Object.assign(draft, { ...mediaShape });\n      break;\n    }\n    default:\n      break;\n  }\n}, mediaShape);\n\ndeclare global {\n  interface Window {\n    webEndpoint: string | undefined;\n    zmClient: any | undefined;\n    mediaStream: any | undefined;\n    crossOriginIsolated: boolean;\n  }\n}\n\nfunction App(props: AppProps) {\n  const {\n    meetingArgs: { sdkKey, topic, signature, name, password, webEndpoint: webEndpointArg, enforceGalleryView }\n  } = props;\n  const [loading, setIsLoading] = useState(true);\n  const [loadingText, setLoadingText] = useState('');\n  const [isFailover, setIsFailover] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>('closed');\n  const [mediaState, dispatch] = useReducer(mediaReducer, mediaShape);\n  const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);\n  const [chatClient, setChatClient] = useState<ChatClient | null>(null);\n  const [recordingClient, setRecordingClient] = useState<RecordingClient | null>(null);\n  const [commandClient, setCommandClient] = useState<CommandChannelClient | null>(null);\n  const [subsessionClient, setSubsessionClient] = useState<SubsessionClient | null>(null);\n  const [liveTranscriptionClient, setLiveTranscriptionClient] = useState<LiveTranscriptionClient | null>(null);\n  const [isSupportGalleryView, setIsSupportGalleryView] = useState<boolean>(true);\n  const zmClient = useContext(ZoomContext);\n  let webEndpoint: any;\n  if (webEndpointArg) {\n    webEndpoint = webEndpointArg;\n  } else {\n    webEndpoint = window?.webEndpoint ?? 'zoom.us';\n  }\n  const mediaContext = useMemo(() => ({ ...mediaState, mediaStream }), [mediaState, mediaStream]);\n  const galleryViewWithoutSAB = Number(enforceGalleryView) === 1 && !window.crossOriginIsolated;\n  useEffect(() => {\n    const init = async () => {\n      await zmClient.init('en-US', `${window.location.origin}/lib`, {\n        webEndpoint,\n        enforceMultipleVideos: galleryViewWithoutSAB,\n        stayAwake: true\n      });\n      try {\n        setLoadingText('Joining the session...');\n        await zmClient.join(topic, signature, name, password).catch((e) => {\n          console.log(e);\n        });\n        const stream = zmClient.getMediaStream();\n        setMediaStream(stream);\n        setIsSupportGalleryView(stream.isSupportMultipleVideos() && !isAndroidBrowser());\n        const chatClient = zmClient.getChatClient();\n        const commandClient = zmClient.getCommandClient();\n        const recordingClient = zmClient.getRecordingClient();\n        const ssClient = zmClient.getSubsessionClient();\n        const ltClient = zmClient.getLiveTranscriptionClient();\n        setChatClient(chatClient);\n        setCommandClient(commandClient);\n        setRecordingClient(recordingClient);\n        setSubsessionClient(ssClient);\n        setLiveTranscriptionClient(ltClient);\n        setIsLoading(false);\n      } catch (e: any) {\n        setIsLoading(false);\n        message.error(e.reason);\n      }\n    };\n    init();\n    return () => {\n      ZoomVideo.destroyClient();\n    };\n  }, [sdkKey, signature, zmClient, topic, name, password, webEndpoint, galleryViewWithoutSAB]);\n  const onConnectionChange = useCallback(\n    (payload) => {\n      if (payload.state === ConnectionState.Reconnecting) {\n        setIsLoading(true);\n        setIsFailover(true);\n        setStatus('connecting');\n        const { reason, subsessionName } = payload;\n        if (reason === ReconnectReason.Failover) {\n          setLoadingText('Session Disconnected,Try to reconnect');\n        } else if (reason === ReconnectReason.JoinSubsession || reason === ReconnectReason.MoveToSubsession) {\n          setLoadingText(`Joining ${subsessionName}...`);\n        } else if (reason === ReconnectReason.BackToMainSession) {\n          setLoadingText('Returning to Main Session...');\n        }\n      } else if (payload.state === ConnectionState.Connected) {\n        setStatus('connected');\n        if (isFailover) {\n          setIsLoading(false);\n        }\n        window.zmClient = zmClient;\n        window.mediaStream = zmClient.getMediaStream();\n\n        console.log('getSessionInfo', zmClient.getSessionInfo());\n      } else if (payload.state === ConnectionState.Closed) {\n        setStatus('closed');\n        dispatch({ type: 'reset-media' });\n        if (payload.reason === 'ended by host') {\n          Modal.warning({\n            title: 'Meeting ended',\n            content: 'This meeting has been ended by host'\n          });\n        }\n      }\n    },\n    [isFailover, zmClient]\n  );\n  const onMediaSDKChange = useCallback((payload) => {\n    const { action, type, result } = payload;\n    dispatch({ type: `${type}-${action}`, payload: result === 'success' });\n  }, []);\n\n  const onDialoutChange = useCallback((payload) => {\n    console.log('onDialoutChange', payload);\n  }, []);\n\n  const onAudioMerged = useCallback((payload) => {\n    console.log('onAudioMerged', payload);\n  }, []);\n\n  const onLeaveOrJoinSession = useCallback(async () => {\n    if (status === 'closed') {\n      setIsLoading(true);\n      await zmClient.join(topic, signature, name, password);\n      setIsLoading(false);\n    } else if (status === 'connected') {\n      await zmClient.leave();\n      message.warn('You have left the session.');\n    }\n  }, [zmClient, status, topic, signature, name, password]);\n  useEffect(() => {\n    zmClient.on('connection-change', onConnectionChange);\n    zmClient.on('media-sdk-change', onMediaSDKChange);\n    zmClient.on('dialout-state-change', onDialoutChange);\n    zmClient.on('merged-audio', onAudioMerged);\n    return () => {\n      zmClient.off('connection-change', onConnectionChange);\n      zmClient.off('media-sdk-change', onMediaSDKChange);\n      zmClient.off('dialout-state-change', onDialoutChange);\n      zmClient.off('merged-audio', onAudioMerged);\n    };\n  }, [zmClient, onConnectionChange, onMediaSDKChange, onDialoutChange, onAudioMerged]);\n  return (\n    <div className=\"App\">\n      {loading && <LoadingLayer content={loadingText} />}\n      {!loading && (\n        <ZoomMediaContext.Provider value={mediaContext}>\n          <ChatContext.Provider value={chatClient}>\n            <RecordingContext.Provider value={recordingClient}>\n              <CommandContext.Provider value={commandClient}>\n                <SubsessionContext.Provider value={subsessionClient}>\n                  <LiveTranscriptionContext.Provider value={liveTranscriptionClient}>\n                    <Router>\n                      <Switch>\n                        <Route\n                          path=\"/\"\n                          render={(props) => (\n                            <Home {...props} status={status} onLeaveOrJoinSession={onLeaveOrJoinSession} />\n                          )}\n                          exact\n                        />\n                        <Route path=\"/index.html\" component={Home} exact />\n                        <Route path=\"/chat\" component={Chat} />\n                        <Route path=\"/command\" component={Command} />\n                        <Route\n                          path=\"/video\"\n                          component={isSupportGalleryView ? Video : galleryViewWithoutSAB ? VideoNonSAB : VideoSingle}\n                        />\n                        <Route path=\"/subsession\" component={Subsession} />\n                        <Route path=\"/preview\" component={Preview} />\n                      </Switch>\n                    </Router>\n                  </LiveTranscriptionContext.Provider>\n                </SubsessionContext.Provider>\n              </CommandContext.Provider>\n            </RecordingContext.Provider>\n          </ChatContext.Provider>\n        </ZoomMediaContext.Provider>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","__webpack_require__.h = () => (\"8d62fff343fb385fd45f\")"],"names":[],"sourceRoot":""}